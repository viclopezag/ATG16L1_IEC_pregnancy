row_annotation_2 <- rowAnnotation(superpathway = feature_annotation[,c("class2")])
# col_fun = hcl.colors(504,palette="Zissou 1")
#
row_annotation_1 <- rowAnnotation(Prevalence = anno_barplot(select(feature_annotation,c("prevalence"))),
# pval_CvsR_at_d28= anno_simple(-log10(feature_annotation[,8]),col = pval_col_fun, pch = pch_p_d28),
fdr_CvsR_at_d28= anno_simple(-log10(select(feature_annotation,c("FDR_CvsR_d28"))),col = fdr_col_fun, pch = pch_fdr_d28),
# pval_CvsR_at_d70= anno_simple(-log10(feature_annotation[,9]),col = pval_col_fun, pch = pch_p_d70),
fdr_CvsR_at_d70= anno_simple(-log10(select(feature_annotation,c("FDR_CvsR_d70"))),col = fdr_col_fun, pch = pch_fdr_d70),
annotation_name_side = "top")
row_annotation_2 <- rowAnnotation(superpathway = feature_annotation[,c("class2")])
?anno_block
gp = gpar(fill = 2:4))
gp = gpar(fill = 2:4))
gp = gpar(fill = 2:4)
gp
top_annotation = HeatmapAnnotation(col_names = anno_block(gp = gpar(fill=2:4)))
row_annotation_right <- rowAnnotation(superpathway = feature_annotation[,c("class2")])
top_annotation = HeatmapAnnotation(col_names = anno_block(gp = gpar(fill=2:4)),
labels=colnames(heatmap_beta_coef_matrix),
labels_gp = gpar(col="white",fontsize=5))
colnames(heatmap_beta_coef_matrix)
top_annotation = HeatmapAnnotation(col_names = anno_block(gp = gpar(fill=2:4)),
labels=colnames(heatmap_beta_coef_matrix),
labels_gp = gpar(col="white",fontsize=5))
# FDR color bar function
pval_col_fun = colorRamp2(c(0,2,3), c("darkgreen","white","red"))
fdr_col_fun = colorRamp2(c(0,2,3), c("darkgreen","white","red"))
# col_fun = hcl.colors(504,palette="Zissou 1")
#
row_annotation_left <- rowAnnotation(Prevalence = anno_barplot(select(feature_annotation,c("prevalence"))),
# pval_CvsR_at_d28= anno_simple(-log10(feature_annotation[,8]),col = pval_col_fun, pch = pch_p_d28),
fdr_CvsR_at_d28= anno_simple(-log10(select(feature_annotation,c("FDR_CvsR_d28"))),col = fdr_col_fun, pch = pch_fdr_d28),
# pval_CvsR_at_d70= anno_simple(-log10(feature_annotation[,9]),col = pval_col_fun, pch = pch_p_d70),
fdr_CvsR_at_d70= anno_simple(-log10(select(feature_annotation,c("FDR_CvsR_d70"))),col = fdr_col_fun, pch = pch_fdr_d70),
annotation_name_side = "top")
row_annotation_right <- rowAnnotation(superpathway = feature_annotation[,c("class2")])
top_annotation = HeatmapAnnotation(col_names = anno_block(gp = gpar(fill=2:4)),
labels=colnames(heatmap_beta_coef_matrix),
labels_gp = gpar(col="white",fontsize=5))
gpar(col="white",fontsize=5)
top_annotation = HeatmapAnnotation(col_names = anno_block(gp = gpar(fill=2:4)),
labels=colnames(heatmap_beta_coef_matrix))
# now we generate two legends, one for the p-value
# see how we define the legend for p value
# lgd_pvalue = Legend(title = "p value", col_fun = pval_col_fun, at = c(0, 1, 2, 3),
#                     labels = c("1", "0.1", "0.05", "0.001"))
lgd_fdr = Legend(title = "FDR value", col_fun = fdr_col_fun, at = c(0, 1, 2, 3),
labels = c("1", "0.1", "0.05", "0.001"))
# and one for the significant p-values
lgd_sig = Legend(pch = "*", type = "points", labels = "< 0.05")
heat_map <- Heatmap(heatmap_beta_coef_matrix, name = "Beta Coefficient",
top_annotation = top_annotation,
left_annotation = row_annotation_left,
right_annotation = row_annotation_right,
na_col = "black",
row_names_side = "left",
row_names_centered = FALSE,
column_names_side = "top",
# row_names_gp = gpar(fontsize = 10),
rect_gp = gpar(col = "white", lwd = 2),
# row_km = 23,
# column_km = 2
cluster_rows = TRUE,
row_dend_side = "right",
# row_title = rev(unique(feature_annotation[,c("class2")])),
# row_title_gp = gpar(lty = "solid", lwd = 3,fontsize=5),
row_title_side = "right",
row_title_rot = 45,
row_title = NULL,
split = feature_annotation[,c("class2")],
)
# PDF heatmap
pdf("plots/longitudinal_significant_features_memory_effect.pdf", width= 18, height=45)
draw(heat_map, annotation_legend_list = list(lgd_fdr, lgd_sig), padding = unit(c(3, 150, 2, 0.3), "mm"))
dev.off()
heat_map <- Heatmap(heatmap_beta_coef_matrix, name = "Beta Coefficient",
top_annotation = top_annotation,
left_annotation = row_annotation_left,
right_annotation = row_annotation_right,
na_col = "black",
row_names_side = "left",
row_names_centered = FALSE,
# row_names_gp = gpar(fontsize = 10),
rect_gp = gpar(col = "white", lwd = 2),
# row_km = 23,
# column_km = 2
cluster_rows = TRUE,
row_dend_side = "right",
# row_title = rev(unique(feature_annotation[,c("class2")])),
# row_title_gp = gpar(lty = "solid", lwd = 3,fontsize=5),
row_title_side = "right",
row_title_rot = 45,
row_title = NULL,
split = feature_annotation[,c("class2")],
)
top_annotation = HeatmapAnnotation(col_names = anno_block(gp = gpar(fill=2:4)),
labels=colnames(heatmap_beta_coef_matrix))
# col_fun = hcl.colors(504,palette="Zissou 1")
#
row_annotation_left <- rowAnnotation(Prevalence = anno_barplot(select(feature_annotation,c("prevalence"))),
# pval_CvsR_at_d28= anno_simple(-log10(feature_annotation[,8]),col = pval_col_fun, pch = pch_p_d28),
fdr_CvsR_at_d28= anno_simple(-log10(select(feature_annotation,c("FDR_CvsR_d28"))),col = fdr_col_fun, pch = pch_fdr_d28),
# pval_CvsR_at_d70= anno_simple(-log10(feature_annotation[,9]),col = pval_col_fun, pch = pch_p_d70),
fdr_CvsR_at_d70= anno_simple(-log10(select(feature_annotation,c("FDR_CvsR_d70"))),col = fdr_col_fun, pch = pch_fdr_d70),
annotation_name_side = "top")
row_annotation_right <- rowAnnotation(superpathway = feature_annotation[,c("class2")])
top_annotation = HeatmapAnnotation(col_names = anno_block(gp = gpar(fill=2:4)),
labels=colnames(heatmap_beta_coef_matrix))
# now we generate two legends, one for the p-value
# see how we define the legend for p value
# lgd_pvalue = Legend(title = "p value", col_fun = pval_col_fun, at = c(0, 1, 2, 3),
#                     labels = c("1", "0.1", "0.05", "0.001"))
lgd_fdr = Legend(title = "FDR value", col_fun = fdr_col_fun, at = c(0, 1, 2, 3),
labels = c("1", "0.1", "0.05", "0.001"))
# and one for the significant p-values
lgd_sig = Legend(pch = "*", type = "points", labels = "< 0.05")
heat_map <- Heatmap(heatmap_beta_coef_matrix, name = "Beta Coefficient",
top_annotation = top_annotation,
left_annotation = row_annotation_left,
right_annotation = row_annotation_right,
na_col = "black",
row_names_side = "left",
row_names_centered = FALSE,
# row_names_gp = gpar(fontsize = 10),
rect_gp = gpar(col = "white", lwd = 2),
# row_km = 23,
# column_km = 2
cluster_rows = TRUE,
row_dend_side = "right",
# row_title = rev(unique(feature_annotation[,c("class2")])),
# row_title_gp = gpar(lty = "solid", lwd = 3,fontsize=5),
row_title_side = "right",
row_title_rot = 45,
row_title = NULL,
split = feature_annotation[,c("class2")],
)
# PDF heatmap
pdf("plots/longitudinal_significant_features_memory_effect.pdf", width= 18, height=45)
draw(heat_map, annotation_legend_list = list(lgd_fdr, lgd_sig), padding = unit(c(3, 150, 2, 0.3), "mm"))
dev.off()
top_annotation = HeatmapAnnotation(col_names = anno_block(gp = gpar(fill=2:4)),
labels = colnames(heatmap_beta_coef_matrix),
labels_gp = gp(col="white",fontsize=5))
top_annotation = HeatmapAnnotation(col_names = anno_block(gp = gpar(fill=2:4)),
labels = colnames(heatmap_beta_coef_matrix),
labels_gp = gpar(col="white",fontsize=5))
# Building Heatmaps from Maaslin2 output
# 17.08.2022
# Dr. Víctor A. López-Agudelo
rm(list=ls())
getwd()
# Library Packages
library(data.table)
library(dplyr)
library(tidyverse)
setwd("/Users/victorlopez/Library/CloudStorage/OneDrive-InstitutfürKlinischeMolekularbiologie,Christian-Albrechts-UniversitätKiel/MedCluster/PEM_BF/humann3_data")
# Loading Longitudinal per-feature test results from Maaslin2
path = "maaslin2"
long_R <- read_tsv(paste0(path,"/pathabundances/LM/R_d28vsd70/all_results.tsv")) %>%
mutate(group = "longR")
long_C <- read_tsv(paste0(path,"/pathabundances/LM/C_d28vsd70/all_results.tsv")) %>%
mutate(group = "longC")
CvsR_d28 <- read_tsv(paste0(path,"/pathabundances/LM/d28_CvsR/all_results.tsv")) %>%
mutate(group = "CvsRd28")
CvsR_d70 <- read_tsv(paste0(path,"/pathabundances/LM/d70_CvsR/all_results.tsv")) %>%
mutate(group = "CvsRd70")
# load("data/MetaCyc_pathway_map.RData")
metacyc_pathway_map <- read_tsv("data/humann3_to_metacyc_classes.tsv")
# Creating Tables of Important Data to plot #
# Using FDR cut-off qval < 0.25 #
fdr_filtered_features <- rbind(long_R,long_C,CvsR_d28,CvsR_d70) %>%
subset(., qval <= 0.05) %>%
select(feature) %>%
distinct() %>%
mutate(feature = str_replace_all(feature,"[.]","-"))
# Table of Beta Coefficients #
coef_filtered_features <- rbind(long_R,long_C,CvsR_d28,CvsR_d70) %>%
mutate(feature = str_replace_all(feature,"[.]","-")) %>%
select(feature,coef,group) %>%
pivot_wider(names_from=group, values_from = coef) %>%
rename(coef_long_R = longR,
coef_long_C = longC,
coef_CvsR_d28 = CvsRd28,
coef_CvsR_d70 = CvsRd70) %>%
left_join(fdr_filtered_features,., by = "feature")
# Table of FDR values #
qval_filtered_features <- rbind(long_R,long_C,CvsR_d28,CvsR_d70) %>%
as_tibble() %>%
mutate(feature = str_replace_all(feature,"[.]","-")) %>%
select(feature,qval,group) %>%
pivot_wider(names_from=group, values_from = qval) %>%
rename(FDR_long_R = longR,
FDR_long_C = longC,
FDR_CvsR_d28 = CvsRd28,
FDR_CvsR_d70 = CvsRd70) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 1)) %>%
left_join(fdr_filtered_features,., by = "feature")
# Table of P values #
pval_filtered_features <- rbind(long_R,long_C,CvsR_d28,CvsR_d70) %>%
as_tibble() %>%
mutate(feature = str_replace_all(feature,"[.]","-")) %>%
select(feature,pval,group) %>%
pivot_wider(names_from=group, values_from = pval) %>%
rename(PVAL_long_R = longR,
PVAL_long_C = longC,
PVAL_CvsR_d28 = CvsRd28,
PVAL_CvsR_70 = CvsRd70) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 1)) %>%
left_join(fdr_filtered_features,., by = "feature")
# Table of N.not.0 #
prevalence_filtered_features <- rbind(long_R,long_C,CvsR_d28,CvsR_d70) %>%
as_tibble() %>%
mutate(feature = str_replace_all(feature,"[.]","-")) %>%
select(feature,N,N.not.0,group) %>%
pivot_wider(names_from=group, values_from = N.not.0) %>%
rowwise() %>%
mutate(sum_N.not.0 = sum(longR,longC,CvsRd28,CvsRd70, na.rm = TRUE)) %>%
rowwise() %>%
mutate(total_N = N*sum(if_else(longR > 0, 1, 0),
if_else(longC > 0, 1, 0),
if_else(CvsRd28 > 0, 1, 0),
if_else(CvsRd70 > 0, 1, 0), na.rm = TRUE)) %>%
mutate(prevalence = sum_N.not.0/total_N) %>%
select(feature, prevalence) %>%
left_join(fdr_filtered_features,., by = "feature")
# Combine all the tables #
ordered_dataframe_to_heatmap <- cbind(coef_filtered_features,prevalence_filtered_features[,-1],qval_filtered_features[,-1],pval_filtered_features[,-1]) %>%
mutate(feature = str_replace_all(feature,"X1CMET2-PWY","1CMET2-PWY")) %>%
mutate(feature = str_replace_all(feature,"ARG-POLYAMINE-SYN","ARG+POLYAMINE-SYN")) %>%
left_join(.,metacyc_pathway_map, by = "feature") %>%
arrange(-coef_long_R)
write.table(ordered_dataframe_to_heatmap, "maaslin2/ordered_data_for_heatmap_LM.txt", sep="\t")
#ordering from ascendent to descendent order
# Building Heatmap
library(ComplexHeatmap)
library(circlize)
##::::::::::::::::::::::::::::::::::::::::::::::::::::::::##
## Heatmap of Pair-Wise comparisons C vs R at d28 and d70 ##
##::::::::::::::::::::::::::::::::::::::::::::::::::::::::##
# heatmap_beta_coef_matrix <- as.matrix(data.frame(beta_coeff_matrix[,c(1,3,11)], row.names = "feature"))
# colnames(heatmap_beta_coef_matrix) <- c("KO","WT")
feature_annotation <- ordered_dataframe_to_heatmap[,-c(2:5)] %>% # Without the Beta Coefficients
cbind(ordered_dataframe_to_heatmap[,c("pathway_name")],.) %>%
column_to_rownames(var="pathway_name") %>%
rename(pathway_name = 1)
heatmap_beta_coef_matrix <- ordered_dataframe_to_heatmap %>%
select(coef_CvsR_d28,coef_CvsR_d70,pathway_name) %>%
column_to_rownames(var = "pathway_name") %>%
as.matrix()
# Adding * to significant features in WT vs KO comparison
# pvals
is.sig_p_d28 <- feature_annotation$PVAL_CvsR_d28 < 0.05
pch_p_d28 = rep("*", length(is.sig_p_d28))
pch_p_d28[!is.sig_p_d28] = NA
is.sig_p_d70 <- feature_annotation$PVAL_CvsR_d70 < 0.05
pch_p_d70 = rep("*", length(is.sig_p_d70))
pch_p_d70[!is.sig_p_d70] = NA
# fdrs
is.sig_fdr_d28 <- feature_annotation$FDR_CvsR_d28 < 0.05
pch_fdr_d28 = rep("*", length(is.sig_fdr_d28))
pch_fdr_d28[!is.sig_fdr_d28] = NA
is.sig_fdr_d70 <- feature_annotation$FDR_CvsR_d70 < 0.05
pch_fdr_d70 = rep("*", length(is.sig_fdr_d70))
pch_fdr_d70[!is.sig_fdr_d70] = NA
# FDR color bar function
pval_col_fun = colorRamp2(c(0,2,3), c("darkgreen","white","red"))
fdr_col_fun = colorRamp2(c(0,2,3), c("darkgreen","white","red"))
# col_fun = hcl.colors(504,palette="Zissou 1")
#
row_annotation_left <- rowAnnotation(Prevalence = anno_barplot(select(feature_annotation,c("prevalence"))),
# pval_CvsR_at_d28= anno_simple(-log10(feature_annotation[,8]),col = pval_col_fun, pch = pch_p_d28),
fdr_CvsR_at_d28= anno_simple(-log10(select(feature_annotation,c("FDR_CvsR_d28"))),col = fdr_col_fun, pch = pch_fdr_d28),
# pval_CvsR_at_d70= anno_simple(-log10(feature_annotation[,9]),col = pval_col_fun, pch = pch_p_d70),
fdr_CvsR_at_d70= anno_simple(-log10(select(feature_annotation,c("FDR_CvsR_d70"))),col = fdr_col_fun, pch = pch_fdr_d70),
annotation_name_side = "top")
row_annotation_right <- rowAnnotation(superpathway = feature_annotation[,c("class2")])
top_annotation = HeatmapAnnotation(col_names = anno_block(gp = gpar(fill=2:4)),
labels = colnames(heatmap_beta_coef_matrix),
labels_gp = gpar(col="white",fontsize=5))
?gpar
top_annotation = HeatmapAnnotation(col_names = anno_block(gp = gpar(fill=2:4)),
labels = colnames(heatmap_beta_coef_matrix),
labels_gp = gpar(col="white",fontsize=10))
getwd()
rm(list=ls())
getwd()
setwd("~")
getwd()
rm(list=ls())
getwd()
# Library Packages
library(dplyr)
library(tidyverse)
# Loading Longitudinal per-feature test results from Maaslin2
path = "maaslin2"
long_R <- read_tsv(paste0(path,"/pathabundances/LM/R_d28vsd70/all_results.tsv")) %>%
mutate(group = "longR")
CvsR_d28 <- read_tsv(paste0(path,"/pathabundances/LM/d28_CvsR/all_results.tsv")) %>%
mutate(group = "CvsRd28")
CvsR_d70 <- read_tsv(paste0(path,"/pathabundances/LM/d70_CvsR/all_results.tsv")) %>%
mutate(group = "CvsRd70")
# metacyc CPM abundance data
path_abundances <- read.table("data/humann_merged_pathabundance-cpm-no-taxa-metacyc-id.tsv", sep = "\t",check.names = F, header = T, row.names = "Pathway")
colnames(path_abundances) <- substr(colnames(path_abundances), 1, 6) # extracting only the first 6 strings.
metacyc_pathway_map <- read_tsv("data/humann3_to_metacyc_classes.tsv")
rm(list=ls())
getwd()
# Library Packages
library(dplyr)
library(tidyverse)
# Loading Longitudinal per-feature test results from Maaslin2
path = "maaslin2"
long_R <- read_tsv(paste0(path,"/pathabundances/LM/R_d28vsd70/all_results.tsv")) %>%
mutate(group = "longR")
?adonis2
library(vegan)
?adonis2
?ordinate
??ordinate
system("locate libSM.6.dylib")
?variancePartition
library(variancePartition)
session()
sesion()
sessionInfo()
library(variancePartition)
sessionInfo()
memory.limit()
memory.limit()
memory.size()
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
library(Seurat)
session()
sessionInfo()
install.packages('Seurat')
library(Seurat)
install.packages("Seurat")
install.packages('Seurat')
library(Seurat)
SessionInfo()
sessionInfo()
library(remotes)
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
remotes::install_github("mojaveazure/seurat-object", "seurat5")
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
library(Seurat)
sessionInfo()
library(org.Hs.eg.db)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
library(SingleR)
library(tidyr)
devtools::install_github("elliefewings/DoMultiBarHeatmap")
library(DoMultiBarHeatmap)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
library(clusterProfiler)
library("variancePartition")
data(varPartData)
form <- ~ Age + (1 | Individual) + (1 | Tissue) + (1 | Batch)
varPart <- fitExtractVarPartModel(geneExpr, form, info)
library(tidyverse)
library(phyloseq)
library(Biostrings)
library(ggplot2)
library(ggrepel)
library(vegan)
library(microbiome)
library(ggpubr)
library(dplyr)
library(Maaslin2)
# Code for - Differential Abundance Analysis - from 16S - ASVs level -------
# Setting working directory #
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
ps <- readRDS("inputs/phyloseq_object.rds")
# Cutoff #
(ps_fr <- subset_samples(ps, sample_sums(ps) > 5000 & pregnancy_status == "P"))
# Deleting taxa with relative abundance lowest than 1e-5
minTotRelAbun <- 1e-5
x <- taxa_sums(ps_fr)
keepTaxa <- (x / sum(x)) > minTotRelAbun
ps_f <- prune_taxa(keepTaxa, ps_fr)
#:::::::::::: Maaslin2 :::::::::::#
# Creating directory
dir.create("outputs/differential_abundance_16S_ASVs/")
dir.create("outputs/differential_abundance_16S_ASVs/lmm_maaslin2")
dir.create("outputs/differential_abundance_16S_ASVs/lmm_maaslin2/ASVs")
# Pair-wise comparison
m2_s <- Maaslin2(
input_data = data.frame(ps_f@otu_table),
input_metadata = data.frame(ps_f@sam_data),
output="outputs/differential_abundance_16S_ASVs/lmm_maaslin2/ASVs/complete_model",
normalization = "CLR",
transform = "NONE",
analysis_method = "LM",
fixed_effects = c("genotype","timepoint"),
random_effects = c("mouse_id"),
reference = c("genotype,WT","timepoint,BL"),
min_abundance = 1e-8,
min_prevalence = 0.12, # 80% modified rule (min(samples_in_time)/total_samples)*80
correction = "BH",
max_significance = 0.05,
plot_heatmap = TRUE,
heatmap_first_n = 50,
plot_scatter = TRUE
)
#::::::::::::::::::::::::::::::::::::::#
# Comparison : BL : WT vs KO #
m2_s <- Maaslin2(
input_data = data.frame(subset_samples(ps_f, timepoint == "BL")@otu_table),
input_metadata = data.frame(ps_f@sam_data) %>% filter(timepoint == "BL"),
output="outputs/differential_abundance_16S_ASVs/lmm_maaslin2/ASVs/BL_WTvsKO",
normalization = "CLR",
transform = "NONE",
analysis_method = "LM",
fixed_effects = c("genotype"),
#random_effects = c("mouse_id"),
reference = c("genotype,WT"),
min_abundance = 1e-8,
min_prevalence = 0.12, # 80% modified rule (min(samples_in_time)/total_samples)*80
correction = "BH",
max_significance = 0.05,
plot_heatmap = TRUE,
heatmap_first_n = 50,
plot_scatter = TRUE
)
#::::::::::::::::::::::::::::::::::::::#
# Comparison : w3 : WT vs KO #
m2_s <- Maaslin2(
input_data = data.frame(subset_samples(ps_f, timepoint == "w3")@otu_table),
input_metadata = data.frame(ps_f@sam_data) %>% filter(timepoint == "w3"),
output="outputs/differential_abundance_16S_ASVs/lmm_maaslin2/ASVs/w3_WTvsKO",
normalization = "CLR",
transform = "NONE",
analysis_method = "LM",
fixed_effects = c("genotype"),
#random_effects = c("mouse_id"),
reference = c("genotype,WT"),
min_abundance = 1e-8,
min_prevalence = 0.12, # 80% modified rule (min(samples_in_time)/total_samples)*80
correction = "BH",
max_significance = 0.05,
plot_heatmap = TRUE,
heatmap_first_n = 50,
plot_scatter = TRUE
)
#::::::::::::::::::::::::::::::::::::::#
# Comparison : w6 : WT vs KO #
m2_s <- Maaslin2(
input_data = data.frame(subset_samples(ps_f, timepoint == "w6")@otu_table),
input_metadata = data.frame(ps_f@sam_data) %>% filter(timepoint == "w6"),
output="outputs/differential_abundance_16S_ASVs/lmm_maaslin2/ASVs/w6_WTvsKO",
normalization = "CLR",
transform = "NONE",
analysis_method = "LM",
fixed_effects = c("genotype"),
#random_effects = c("mouse_id"),
reference = c("genotype,WT"),
min_abundance = 1e-8,
min_prevalence = 0.12, # 80% modified rule (min(samples_in_time)/total_samples)*80
correction = "BH",
max_significance = 0.05,
plot_heatmap = TRUE,
heatmap_first_n = 50,
plot_scatter = TRUE
)
#-------------------------------------------------------------------------------
# Heatmap Plot #
ps_clr <- microbiome::transform(ps_f, transform = "clr")
# Loading Longitudinal per-feature test results from Maaslin2
path = "outputs/differential_abundance_16S_ASVs/lmm_maaslin2"
complete_model <- read_tsv(paste0(path,"/ASVs/complete_model/all_results.tsv")) %>%
mutate(group = "complete_model")
WTvsKO_BL <- read_tsv(paste0(path,"/ASVs/BL_WTvsKO/all_results.tsv"))%>%
mutate(group = "WTvsKOBL")
WTvsKO_w3 <- read_tsv(paste0(path,"/ASVs/w3_WTvsKO/all_results.tsv"))%>%
mutate(group = "WTvsKOw3")
WTvsKO_w6 <- read_tsv(paste0(path,"/ASVs/w6_WTvsKO/all_results.tsv"))%>%
mutate(group = "WTvsKOw6")
# Using FDR cut-off qval < 0.1 #
fdr_filtered_features <- rbind(complete_model %>% filter(value=="KO"),WTvsKO_BL,WTvsKO_w3,WTvsKO_w6) %>%
# filter(value == "WT") %>%
subset(., qval <= 0.05) %>%
select(feature) %>%
distinct()
# Loading Metadata #
preg_metadata <- data.frame(ps_clr@sam_data) %>%
mutate(genotype = factor(genotype,levels = c("WT","KO"), ordered = T)) %>%
arrange(timepoint,genotype)
# Loading Taxonomy Table #
taxonomy_table <- data.frame(ps_clr@tax_table) %>%
cbind(data.frame(ASVs=rownames(.)),.) %>%
mutate(taxa_name = paste0(ASVs,"|",Family,"|",Species)) %>%
left_join(fdr_filtered_features,.,by = c("feature"="ASVs")) %>%
filter(Family != "unknown") # filtering Unclassified Bacteria
fdr_filtered_features <- taxonomy_table %>%
select(feature)
# FDR filtered Features #
qval_filtered_features <- rbind(complete_model %>% filter(value=="KO"),WTvsKO_BL,WTvsKO_w3,WTvsKO_w6) %>%
as_tibble() %>%
select(feature,qval,group) %>%
pivot_wider(names_from=group, values_from = qval) %>%
rename(FDR_WTvsKO=complete_model,
FDR_WTvsKO_BL = WTvsKOBL,
FDR_WTvsKO_w3 = WTvsKOw3,
FDR_WTvsKO_w6 = WTvsKOw6) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 1)) %>%
left_join(fdr_filtered_features,., by = "feature")
